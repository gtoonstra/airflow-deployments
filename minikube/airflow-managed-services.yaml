apiVersion: v1
kind: Service
metadata:
  name: airflow-redis
  labels:
    app: airflow
spec:
  type: ClusterIP
  selector:
    app: airflow
    tier: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: airflow-redis
  labels:
    app: airflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow
      tier: redis
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: airflow
        tier: redis
    spec:
      containers:
      - image: redis:alpine
        imagePullPolicy: IfNotPresent
        name: airflow-redis
        ports:
        - containerPort: 6379
          protocol: TCP
        resources:
          limits:
            cpu: 50m
            memory: 5Mi
          requests:
            cpu: 10m
            memory: 2Mi
        terminationMessagePath: /dev/termination-log
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: airflow-database
  labels:
    app: airflow
spec:
  type: ClusterIP
  selector:
    app: airflow
    tier: database
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: v1
kind: Service
metadata:
  name: airflow-external
  labels:
    app: airflow
spec:
  type: NodePort
  selector:
    app: airflow
    tier: database
  ports:
    - protocol: TCP
      port: 3306
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: airflow-database
  labels:
    app: airflow
spec:
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: airflow
        tier: database
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
          # $ kubectl create secret generic mysql-pass --from-file=password.txt
          # make sure password.txt does not have a trailing newline
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef: 
              name: airflow-secret
              key: sql-root-password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
